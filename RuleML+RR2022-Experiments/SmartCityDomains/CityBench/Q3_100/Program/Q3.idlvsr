%Q3: What is the average congestion level and estimated travel time to my
%    destination?

congestionLevel(RoadID, CL):- plannedJourney(RoadID),vehicleCount(RoadID,VC), distanceInMeters(RoadID,DM), &float_division(VC,DM;CL).
howManyRoads(X):- #count{RoadID: plannedJourney(RoadID)}=X.

% Order roads by id
precedes(RoadID,RoadID2) :- plannedJourney(RoadID), plannedJourney(RoadID2), RoadID<RoadID2.

% Define successor, first and last
succ(X,Y) :- precedes(X,Y), not elementInMiddle(X,Y).
elementInMiddle(X,Y) :- precedes(X,Z), precedes(Z,Y).
first(X) :- plannedJourney(X), not hasPredecessor(X).
last(X) :- plannedJourney(X), not hasSuccessor(X).
hasPredecessor(X) :- succ(Y,X).
hasSuccessor(Y) :- succ(Y,X).

% sum congestion levels recursively
partialSum(RoadID,CL) :- first(RoadID), congestionLevel(RoadID,CL).
partialSum(RoadID2,SCL) :- succ(RoadID,RoadID2), partialSum(RoadID,PSCL), congestionLevel(RoadID2,CL), &float_sum(PSCL,CL;SCL).

totalCongestionLevel(S) :- last(RoadID), partialSum(RoadID,S).
%totalCongestionLevel(S):- #sum{CL,RoadID: congestionLevel(RoadID, CL) }=S.

avgCongestionLevel(Avg):-totalCongestionLevel(S), howManyRoads(X), &float_avg(S,X;Avg).
%travelTime(Sum):-#sum{Time,RoadID: plannedJourney(RoadID), avgMeasuredTime(RoadID,Time)}=Sum.

partialTravelTimeSum(RoadID,Time) :- first(RoadID), avgMeasuredTime(RoadID,Time).
partialTravelTimeSum(RoadID2,STime) :- succ(RoadID,RoadID2), partialSum(RoadID,PSTime), avgMeasuredTime(RoadID2,Time), STime=PSTime+Time.

travelTime(Sum):- last(L), partialTravelTimeSum(L,Sum).

plannedJourney(182955). plannedJourney(158505).  distanceInMeters(158505,2065).
distanceInMeters(182955,511).

